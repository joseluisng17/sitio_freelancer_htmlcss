/* root una forma de almacenar variables en css o custom propertie en css */
:root{
    --blanco: #ffffff;
    --oscuro: #212121;
    --primario: #ffc107;
    --secundario: #0097A7;
    --fris: #757575;
}
/* nota: se puede utilizar px o rem para las medidas, es mejor trabajar con rem para que las medidas
queden mejor adaptadas a todas las medidas diferentes de pantalla, como celular, tables, laptop etc. */

html{
    font-size: 62.5%;
    box-sizing: border-box;
    scroll-snap-type: y mandatory;
}

/* Scroll Snap */
.servicios,
.navegacion-principal,
.formulario {
    scroll-snap-align: center;
    scroll-snap-stop: always;
}

/* Agregar estos box-sizing es para es para que el padding no afecte el tamaño del elemento */
*, *:before, *:after {
    box-sizing: inherit;
  }

body{
    font-size: 16px; /* 1rem = 10px  para que se pueda aplicar esta equivalencia hay que agregar los valores el html y al body*/
    font-family: 'Krub', sans-serif;
    background-image: linear-gradient(to top, #DFE9F3 0%, var(--blanco) 100%);
}
h1{
    font-size: 3.8rem;
}
h2{
    font-size: 2.8rem;
}
h3{
    font-size: 1.8rem;
}
h1,h2,h3{
    text-align: center;
}

.titulo span{
    font-size: 2rem;
}

/* Este tipo de sombra el css lo obtuve de https://www.cssmatic.com/box-shadow ahí puede modificar sombra al gusto */
.sombra{
    -webkit-box-shadow: 0px 5px 15px 0px rgba(66,66,66,0.57);
    -moz-box-shadow: 0px 5px 15px 0px rgba(66,66,66,0.57);
    box-shadow: 0px 5px 15px 0px rgba(66,66,66,0.57);
    background-color: var(--blanco);
    padding: 2rem;
    border-radius: 1rem;
}

/* con este contenedo centramos el contenido */
.contenedor{
    max-width: 100rem;
    /* margin-top: 0;
     margin-right: auto;
     margin-bottom: 0;
     margin-left: auto;*/
    margin: 0 auto;
}

.boton{
    background-color: var(--secundario);
    color: var(--blanco);
    padding: 1rem 3rem;
    margin-top: 1rem;
    font-size: 2rem;
    text-decoration: none;
    text-transform: uppercase;
    font-weight: bold;
    border-radius: .5rem;
    width: 90%;
    text-align: center;
    border: none;
}

@media (min-width: 768px) {
    .boton{
        width: auto;
    }
}

.boton:hover {
    cursor: pointer;
}

/* Utilidades */
.w-sm-100{
    width: 100%;
}
@media (min-width: 768px) {
    .w-sm-100{
        width: auto;
    }
}
.flex{
    display: flex;
}
.alinear-derecha{
    justify-content: flex-end;
}

/* Navegación principal */
/* aplicacamos un background al div que contiene el navbar para que todo se ponga de color azul de fondo desde el inicio de la isquierda hasta el final de la recehda*/
.nav-bg{
    background-color: var(--secundario);
}

/* hay algunos elemento html que ya traen block por defecto o inline por defecto
en el caso de los enlaces traen el inline por defecto 
puedes cambiar su valor por defecto con display y cambiarlo por flex, grid o block*/

/* flexbox sus ejec son en fila(row) o columna(column) viene por defecto en row pero puede cambiarse a column*/

.navegacion-principal{
    display: flex;
    /* space-between manda el primer elemanto a la izquierda y el ultimo elemento al final a la derecha
    si hay más elementos los acomoda en el centro dejando su respectivo espacio */
    flex-direction: column;
    

    /* si cambias la direccion de flex a column justify-content ya no sirve entonce se tendria que usar
    align-items*/
}

/* esta medidad de mediaquery para hacer responsiba la pagina web con diferentes medidas de pantalla*/
/* min-width indicamos que los efectos se apliquen de pantallas  de 768px o superior 
si queremos que las medidas de apliquen en pantallas de 768px o inferiores poneos max-width*/
@media(min-width: 768px){
    .navegacion-principal{  
        flex-direction: row;
        justify-content: space-between;
    }
}

.navegacion-principal a{
    /*cambiamos le direccion de los enlaces a block para cuando la pantalla sea chica se ponga en block
    y cuando la pantalla sea superior a 768px se aplica el mediaquerie y pone la direcion en flex: row */
    display: block;
    text-align: center;
    color: var(--blanco);
    text-decoration: none;
    font-size: 2rem;
    font-weight: 700;
    padding: 1rem;
}

.navegacion-principal a:hover{
    background-color: var(--primario);
    color: var(--oscuro);
}

.hero{
    background-image: url(../img/apple.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    height: 450px;
    position: relative;
    margin-bottom: 2rem;
}

.contenido-hero{
    /* para establecer posicion absolute a un elemento debes de poner position relative a antes donde quieres
    que se contenga este elemento en este caso se lo pusimos a .hero entonces hero pasa a ser el padre y donde 
    se va manejar la posición de este elemento, es decir este elemento se va a posicionar en las cordenadas 
    dentro del contenedor hero.
    nota: si no se establecer la position:relative a algun elemento 
    este elemento va tomar como padre a todo el documento de la pagina y su posición se va manejar en todo el navejador
    y no solo en el contenedor hero*/
    position: absolute;
    background-color: rgba(0,0,0, .6);
    /* otra forma de hacer la transparencia sería */
    /*background-color: rgb(0 0 0 / 70% );*/
    width: 100%;
    height: 100%;

    /* centrar vertical y horizontal */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.contenido-hero h2,
.contenido-hero p{
    color: var(--blanco);

}

.ubicacion{
    display: flex;
    align-items: flex-end;
}

/*aplicamos gris a servicios, en grid puedes manejar ambas direcciones almismo tiempo, vertical y horizontal
es una de las diferencias de flex ya que flex solo permite una unica direccion, en grid también se puede decir
que se maneja todo en forma de grillas o tablas */
@media (min-width: 768px) {
    .servicios{
        display: grid;
        /* forma de asignar los elementos en columnas y darle cuanto espacio van a tomar */
        /*grid-template-columns: 33.3% 33.3% 33.3%;*/
        /*grid-template-columns: 1fr 1fr 1fr;*/
        grid-template-columns: repeat(3, 1fr);
        
        /* para asignar las medidas al row */
        /*grid-template-rows: ;*/

        /* manejar la ceparación de las columnas */
        column-gap: 1rem;
    }
}

/* centrar el contenido de servicio el circulo amarillo, titulo, y el parrafo*/
.servicio{
    display: flex;
    flex-direction: column;
    align-items: center;
}


.servicio h3{
   color: var(--secundario);
   font-weight: normal;
}

.servicio p{
    line-height: 2;
    text-align: center;
}


.servicio .iconos{
    height: 15rem;
    width: 15rem;
    background-color: var(--primario);
    border-radius: 50%;

    /* centrando los iconos */
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}


/* contacto */
.formulario{
    background-color: var(--fris);
    width: min( 60rem, 100% ); /* Utiliza el valor más pequeño*/
    margin: 0 auto;
    padding: 2rem;
    border-radius: 1rem;
}

.formulario fieldset{
    border: none;
}

.formulario legend{
    text-align: center;
    font-size: 1.8rem;
    text-transform: uppercase;
    font-weight: 700;
    margin-bottom: 2rem;
    color: var(--primario);
}

@media (min-width: 768px) {
    .contenedor-campos{
        display: grid;
        grid-template-columns: 1fr 1fr;
        column-gap: 1rem;
    }

    /* estamos indicando que en la clase campo tome el elemento con clase campo en su posición 3 y 4 */
    .campo:nth-child(3),
    .campo:nth-child(4){
        /* indicamos que este elemento se expanda de la linea 1 a la 3 o columna 1 a la 3
        en este caso pasan ser tres lineas porque anteriormente en contenedor-campo indicamos
        que se partiera en tres lineas indicando el grid-template-columns: 1fr 1fr; */
        grid-column: 1 / 3;
    }
}

.campo{
    margin-bottom: 1rem;
}

.campo label{
    color: var(--blanco);
    font-weight: bold;
    margin-bottom: .5rem;
    display: block;
}

.campo textarea{
    height: 20rem;
}

.input-text{
    width: 100%;
    border: none;
    padding: 1.5rem;
    border-radius: .5rem;
}


/* footer */
.footer{
    text-align: center;
}


